@page "/submarine"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json.Serialization
@using ffxiv_apps.Domain
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

<PageTitle>FF14 Apps - 고잉마샤호</PageTitle>

<div class="row mb-3">
    <div class="col-md-6 col-sm-12">
        <label class="p-lg-1">인증토큰</label>
        <TextInput @bind-Value="_authToken" Placeholder="인증토큰"/>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3 col-sm-6">
        <label class="p-lg-1">년도</label>
        <NumberInput TValue="int" @bind-Value="_searchYear" Placeholder="년도"/>
    </div>

    <div class="col-md-2 col-sm-6">
        <label class="p-lg-1">월</label>
        <NumberInput TValue="int" @bind-Value="_searchMonth" Placeholder="월"/>
    </div>

    <div class="col-md-3 col-sm-4" style="padding-top: 1.875em">
        <Button Color="ButtonColor.Primary" @onclick="SoldItemReload">
            <Icon Name="IconName.Search"/>
            조회
        </Button>
    </div>
</div>

<div class="mb-3">
    <Button Color="ButtonColor.Primary" @onclick="ToggleContentAsync">
        <Icon Name="IconName.Pencil"/>
        판매금액 입력창
    </Button>
</div>

<div class="mb-3">
    <Collapse @ref="_collapse">
        <Card>
            <CardBody>
                <EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmit" novalidate>
                    <DataAnnotationsValidator/>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">아이템명: <span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <TextInput Value="@_soldItemInput.ItemName" ValueExpression="() => _soldItemInput.ItemName"
                                       ValueChanged="value => ItemNameChanged(value)" Placeholder="아이템명"/>
                            <ValidationMessage For="@(() => _soldItemInput.ItemName)"/>
                        </div>
                        <div class="mt-1 col-md-10">
                            <Image Src="@_soldItemInput.ItemIconUrl" Style="width: 40px; height: 40px;"/>
                            @_soldItemInput.ItemDesc
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">수량: <span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <NumberInput TValue="int" @bind-Value="_soldItemInput.Quantity" Placeholder="판매수량"/>
                            <ValidationMessage For="@(() => _soldItemInput.Quantity)"/>
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">판매가격: <span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <NumberInput TValue="int" @bind-Value="_soldItemInput.Price" Placeholder="판매가격"/>
                            <ValidationMessage For="@(() => _soldItemInput.Price)"/>
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">판매일: <span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <DateInput TValue="DateOnly" @bind-Value="_soldItemInput.SoldDate" Placeholder="판매일"/>
                            <ValidationMessage For="@(() => _soldItemInput.SoldDate)"/>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 text-right">
                            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end"
                                    @onclick="ResetForm">초기화
                            </Button>
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end me-2">저장
                            </Button>
                        </div>
                    </div>
                </EditForm>
            </CardBody>
        </Card>
    </Collapse>
</div>

<div class="mb-3">
    <div class="mb-1">
        <Button Color="ButtonColor.Danger" @onclick="DeleteSelectedItem">
            <Icon Name="IconName.Trash"/>
            선택삭제
        </Button>

        <Button Color="ButtonColor.Primary" @onclick="SoldItemReload">
            <Icon Name="IconName.Recycle"/>
            새로고침
        </Button>

        <Button Color="ButtonColor.Success">
            <Icon Name="IconName.Coin"/> 총수입(길): @_totalPrice.ToString("N0")
        </Button>
    </div>

    <Grid
        @ref="_grid"
        TItem="SoldItem"
        DataProvider="SoldItemDataProvider"
        Class="table table-hover table-bordered table-striped"
        EmptyText="텅"
        AllowSelection="true"
        SelectionMode="GridSelectionMode.Single"
        SelectedItemsChanged="OnSelectedItemsChanged"
        Responsive="true">

        <GridColumns>
            <GridColumn TItem="SoldItem" HeaderText="판매일" PropertyName="SoldDate"
                        HeaderTextAlignment="Alignment.Center">
                @context.SoldDate
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="아이콘" PropertyName="ItemName"
                        HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                <Image Src="@context.ItemIconUrl" Style="width: 40px; height: 40px;"/>
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="아이템명" PropertyName="ItemName"
                        HeaderTextAlignment="Alignment.Center">
                @context.ItemName
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="아이템번호" PropertyName="ItemId"
                        HeaderTextAlignment="Alignment.Center">
                @context.ItemId
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="판매수량" PropertyName="Quantity"
                        HeaderTextAlignment="Alignment.Center">
                @context.Quantity
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="판매가격(길)" PropertyName="Price"
                        HeaderTextAlignment="Alignment.Center">
                @context.Price?.ToString("N0")
            </GridColumn>

            <GridColumn TItem="SoldItem" HeaderText="Id" PropertyName="Id"
                        HeaderTextAlignment="Alignment.Center">
                @context.Id
            </GridColumn>
        </GridColumns>
    </Grid>
</div>

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight"/>

@code {
    [Inject] ToastService ToastService { get; set; } = null!;

    [Inject] HttpClient HttpClient { get; set; } = null!;

    [Inject] IWebAssemblyHostEnvironment Env { get; set; } = null!;

    private Grid<SoldItem> _grid = null!;

    private Collapse _collapse = null!;

    private int _searchYear;

    private int _searchMonth;

    private string? _authToken;

    private IEnumerable<SoldItem> _soldItems = [];

    private SoldItemInput _soldItemInput = new();

    private EditContext? _editContext;

    private SoldItem? _soldItemForDelete;

    private int _totalPrice;

    protected override void OnInitialized()
    {
        var now = DateTime.Now;
        _searchYear = now.Year;
        _searchMonth = now.Month;
        _editContext = new EditContext(_soldItemInput);

        Task.Run(async () => await SoldItemReload());
        base.OnInitialized();
    }

    private string WithApiPath(string? uri = null)
    {
        var sb = new StringBuilder();

        if (!Env.IsDevelopment())
        {
            sb.Append("ff14");
        }

        sb.Append("/api/submarine");

        if (!string.IsNullOrEmpty(uri))
        {
            sb.Append($"/{uri}");
        }

        return sb.ToString();
    }

    private async Task<GridDataProviderResult<SoldItem>> SoldItemDataProvider(GridDataProviderRequest<SoldItem> request)
    {
        return await Task.FromResult(request.ApplyTo(_soldItems));
    }

    private async Task<SoldItem[]> GetSoldItems()
    {
        var startDate = new DateTime(_searchYear, _searchMonth, 1, 0, 0, 0);
        var daysInMonth = DateTime.DaysInMonth(startDate.Year, startDate.Month);
        var endDate = new DateTime(_searchYear, _searchMonth, daysInMonth, 23, 59, 59);

        var param = new Dictionary<string, DateOnly>
        {
            { "startDate", DateOnly.FromDateTime(startDate) },
            { "endDate", DateOnly.FromDateTime(endDate) }
        };

        using var response = await HttpClient.PostAsJsonAsync(WithApiPath("list"), param);

        if (response.IsSuccessStatusCode)
        {
            return (await response.Content.ReadFromJsonAsync<SoldItem[]>())!;
        }

        return [];
    }

    private async Task ToggleContentAsync() => await _collapse.ToggleAsync();

    public async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(_authToken))
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Success,
                iconName: IconName.Bug,
                title: "저장실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: "인증토큰이 필요합니다."
            ));
            return;
        }

        _soldItemInput.Authorization = _authToken;

        try
        {
            using var response = await HttpClient.PostAsJsonAsync(WithApiPath(), _soldItemInput);

            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage
                (
                    type: ToastType.Success,
                    iconName: IconName.Check2All,
                    title: "저장완료!",
                    helpText: $"{DateTime.Now.ToLocalTime()}",
                    message: "저장되었습니다."
                ));

                _soldItemInput = new SoldItemInput();
                _editContext = new EditContext(_soldItemInput);
            }
            else
            {
                ToastService.Notify(new ToastMessage
                (
                    type: ToastType.Danger,
                    iconName: IconName.Bug,
                    title: "저장실패!",
                    helpText: $"{DateTime.Now.ToLocalTime()}",
                    message: "오류가 발생했습니다."
                ));
            }
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Danger,
                iconName: IconName.Bug,
                title: "저장실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: $"오류가 발생했습니다. : {e.Message}"
            ));
        }
    }

    private void ResetForm()
    {
        _soldItemInput = new SoldItemInput();
        _editContext = new EditContext(_soldItemInput);
    }

    private async Task ItemNameChanged(string itemName)
    {
        if (string.IsNullOrWhiteSpace(itemName))
        {
            return;
        }

        _soldItemInput.ItemId = 0;
        _soldItemInput.ItemIcon = 0;
        _soldItemInput.ItemName = string.Empty;

        try
        {
            using var response = await HttpClient.GetAsync(WithApiPath($"item/{itemName}"));

            if (response.IsSuccessStatusCode)
            {
                var message = (await response.Content.ReadFromJsonAsync<ItemDetail>())!;

                _soldItemInput.ItemId = message.Id;
                _soldItemInput.ItemIcon = message.Icon;
                _soldItemInput.ItemName = message.Name;
            }
            else
            {
                ToastService.Notify(new ToastMessage
                (
                    type: ToastType.Danger,
                    iconName: IconName.Bug,
                    title: "아이템 조회 실패!",
                    helpText: $"{DateTime.Now.ToLocalTime()}",
                    message: "아이템 정보를 찾을 수 없습니다."
                ));
            }
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Danger,
                iconName: IconName.Bug,
                title: "아이템 조회 실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: $"오류가 발생했습니다. : {e.Message}"
            ));
        }
    }

    private Task OnSelectedItemsChanged(HashSet<SoldItem>? soldItems)
    {
        if (soldItems is not null && soldItems.Any())
        {
            _soldItemForDelete = soldItems.First();
        }

        return Task.CompletedTask;
    }

    private async Task DeleteSelectedItem()
    {
        if (string.IsNullOrWhiteSpace(_authToken))
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Success,
                iconName: IconName.Bug,
                title: "삭제실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: "인증토큰이 필요합니다."
            ));
            return;
        }

        if (_soldItemForDelete is null)
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Danger,
                iconName: IconName.Bug,
                title: "삭제실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: "삭제할 아이템을 선택해야 합니다."
            ));
            return;
        }

        var body = new Dictionary<string, object>
        {
            { "id", _soldItemForDelete.Id! },
            { "authorization", _authToken }
        };

        var request = new HttpRequestMessage
        {
            Content = JsonContent.Create(body),
            Method = HttpMethod.Delete,
            RequestUri = new Uri(WithApiPath(_soldItemForDelete.Id.ToString()), UriKind.Relative)
        };

        try
        {
            using var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                ToastService.Notify(new ToastMessage
                (
                    type: ToastType.Success,
                    iconName: IconName.Check2All,
                    title: "삭제완료!",
                    helpText: $"{DateTime.Now.ToLocalTime()}",
                    message: "삭제 되었습니다."
                ));
            }
            else
            {
                ToastService.Notify(new ToastMessage
                (
                    type: ToastType.Danger,
                    iconName: IconName.Bug,
                    title: "삭제실패!",
                    helpText: $"{DateTime.Now.ToLocalTime()}",
                    message: "삭제할 아이템이 없습니다."
                ));
            }

            await SoldItemReload();
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
            (
                type: ToastType.Danger,
                iconName: IconName.Bug,
                title: "삭제실패!",
                helpText: $"{DateTime.Now.ToLocalTime()}",
                message: $"오류가 발생했습니다. : {e.Message}"
            ));
        }
    }

    private async Task SoldItemReload()
    {
        _soldItems = await GetSoldItems();

        _totalPrice = _soldItems
            .Sum(item => item.Price) ?? 0;

        await _grid.RefreshDataAsync();
    }

    public class SoldItemInput
    {
        public int ItemId { get; set; }

        public int ItemIcon { get; set; }

        [Required(ErrorMessage = "아이템명을 입력하세요.")]
        public string ItemName { get; set; } = string.Empty;

        [Required(ErrorMessage = "판매수량을 입력하세요.")]
        public int Quantity { get; set; } = 1;

        [Required(ErrorMessage = "판매금액을 입력하세요.")]
        public int Price { get; set; }

        [Required(ErrorMessage = "판매일을 입력하세요.")]
        public DateOnly SoldDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);

        public string? Authorization { get; set; }

        [JsonIgnore] public string ItemDesc => ItemId == 0 ? string.Empty : $"[#{ItemId}] {ItemName}";

        [JsonIgnore]
        public string ItemIconUrl
            => ItemId == 0
                ? "https://demos.blazorbootstrap.com/images/placeholder.png"
                : $"https://ff14.tar.to/assets/img/icon/{IconGroup}/{ItemIcon:D6}_hr1.png";

        private string IconGroup
        {
            get
            {
                var str = $"{ItemIcon:D6}";

                char[] charArray = str.ToCharArray();

                for (int i = 3; i < charArray.Length; i++)
                {
                    charArray[i] = '0';
                }

                return new string(charArray);
            }
        }
    }

    public class ItemDetail
    {
        public int Id { get; init; }
        public int Icon { get; init; }
        public string Name { get; init; } = null!;
        public int Level { get; init; }
    }

}
